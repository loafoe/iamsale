// Code generated by goa v3.13.2, DO NOT EDIT.
//
// aggregate HTTP server types
//
// Command:
// $ goa gen github.com/loafoe/sailpoint/design

package server

import (
	aggregate "github.com/loafoe/sailpoint/gen/aggregate"
	goa "goa.design/goa/v3/pkg"
)

// AccountsResponseBody is the type of the "aggregate" service "accounts"
// endpoint HTTP response body.
type AccountsResponseBody []*AccountResponse

// GroupsResponseBody is the type of the "aggregate" service "groups" endpoint
// HTTP response body.
type GroupsResponseBody []*GroupResponse

// AccountsPermissionDeniedResponseBody is the type of the "aggregate" service
// "accounts" endpoint HTTP response body for the "PermissionDenied" error.
type AccountsPermissionDeniedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GroupsPermissionDeniedResponseBody is the type of the "aggregate" service
// "groups" endpoint HTTP response body for the "PermissionDenied" error.
type GroupsPermissionDeniedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AccountResponse is used to define fields on response body types.
type AccountResponse struct {
	// Name of user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Login of user
	Login *string `form:"login,omitempty" json:"login,omitempty" xml:"login,omitempty"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// GroupResponse is used to define fields on response body types.
type GroupResponse struct {
	// Name of group
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// GUID of group
	GUID *string `form:"guid,omitempty" json:"guid,omitempty" xml:"guid,omitempty"`
}

// NewAccountsResponseBody builds the HTTP response body from the result of the
// "accounts" endpoint of the "aggregate" service.
func NewAccountsResponseBody(res []*aggregate.Account) AccountsResponseBody {
	body := make([]*AccountResponse, len(res))
	for i, val := range res {
		body[i] = marshalAggregateAccountToAccountResponse(val)
	}
	return body
}

// NewGroupsResponseBody builds the HTTP response body from the result of the
// "groups" endpoint of the "aggregate" service.
func NewGroupsResponseBody(res []*aggregate.Group) GroupsResponseBody {
	body := make([]*GroupResponse, len(res))
	for i, val := range res {
		body[i] = marshalAggregateGroupToGroupResponse(val)
	}
	return body
}

// NewAccountsPermissionDeniedResponseBody builds the HTTP response body from
// the result of the "accounts" endpoint of the "aggregate" service.
func NewAccountsPermissionDeniedResponseBody(res *goa.ServiceError) *AccountsPermissionDeniedResponseBody {
	body := &AccountsPermissionDeniedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGroupsPermissionDeniedResponseBody builds the HTTP response body from the
// result of the "groups" endpoint of the "aggregate" service.
func NewGroupsPermissionDeniedResponseBody(res *goa.ServiceError) *GroupsPermissionDeniedResponseBody {
	body := &GroupsPermissionDeniedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAccountsPayload builds a aggregate service accounts endpoint payload.
func NewAccountsPayload() *aggregate.AccountsPayload {
	v := &aggregate.AccountsPayload{}

	return v
}

// NewGroupsPayload builds a aggregate service groups endpoint payload.
func NewGroupsPayload() *aggregate.GroupsPayload {
	v := &aggregate.GroupsPayload{}

	return v
}
