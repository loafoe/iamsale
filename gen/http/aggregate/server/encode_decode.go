// Code generated by goa v3.13.2, DO NOT EDIT.
//
// aggregate HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/loafoe/sailpoint/design

package server

import (
	"context"
	"errors"
	"net/http"

	aggregate "github.com/loafoe/sailpoint/gen/aggregate"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAccountsResponse returns an encoder for responses returned by the
// aggregate accounts endpoint.
func EncodeAccountsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*aggregate.Account)
		enc := encoder(ctx, w)
		body := NewAccountsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAccountsRequest returns a decoder for requests sent to the aggregate
// accounts endpoint.
func DecodeAccountsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		payload := NewAccountsPayload()
		user, pass, ok := r.BasicAuth()
		if !ok {
			return nil, goa.MissingFieldError("Authorization", "header")
		}
		payload.Username = user
		payload.Password = pass

		return payload, nil
	}
}

// EncodeAccountsError returns an encoder for errors returned by the accounts
// aggregate endpoint.
func EncodeAccountsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "PermissionDenied":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewAccountsPermissionDeniedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGroupsResponse returns an encoder for responses returned by the
// aggregate groups endpoint.
func EncodeGroupsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*aggregate.Group)
		enc := encoder(ctx, w)
		body := NewGroupsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGroupsRequest returns a decoder for requests sent to the aggregate
// groups endpoint.
func DecodeGroupsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		payload := NewGroupsPayload()
		user, pass, ok := r.BasicAuth()
		if !ok {
			return nil, goa.MissingFieldError("Authorization", "header")
		}
		payload.Username = user
		payload.Password = pass

		return payload, nil
	}
}

// EncodeGroupsError returns an encoder for errors returned by the groups
// aggregate endpoint.
func EncodeGroupsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "PermissionDenied":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGroupsPermissionDeniedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalAggregateAccountToAccountResponse builds a value of type
// *AccountResponse from a value of type *aggregate.Account.
func marshalAggregateAccountToAccountResponse(v *aggregate.Account) *AccountResponse {
	res := &AccountResponse{
		Name:  v.Name,
		Login: v.Login,
		Email: v.Email,
	}

	return res
}

// marshalAggregateGroupToGroupResponse builds a value of type *GroupResponse
// from a value of type *aggregate.Group.
func marshalAggregateGroupToGroupResponse(v *aggregate.Group) *GroupResponse {
	res := &GroupResponse{
		Name: v.Name,
		GUID: v.GUID,
	}

	return res
}
