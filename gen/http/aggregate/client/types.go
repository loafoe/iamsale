// Code generated by goa v3.13.2, DO NOT EDIT.
//
// aggregate HTTP client types
//
// Command:
// $ goa gen github.com/loafoe/iamsale/design

package client

import (
	aggregate "github.com/loafoe/iamsale/gen/aggregate"
	goa "goa.design/goa/v3/pkg"
)

// AccountsResponseBody is the type of the "aggregate" service "accounts"
// endpoint HTTP response body.
type AccountsResponseBody []*AccountResponse

// GroupsResponseBody is the type of the "aggregate" service "groups" endpoint
// HTTP response body.
type GroupsResponseBody []*GroupResponse

// AccountsPermissionDeniedResponseBody is the type of the "aggregate" service
// "accounts" endpoint HTTP response body for the "PermissionDenied" error.
type AccountsPermissionDeniedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GroupsPermissionDeniedResponseBody is the type of the "aggregate" service
// "groups" endpoint HTTP response body for the "PermissionDenied" error.
type GroupsPermissionDeniedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AccountResponse is used to define fields on response body types.
type AccountResponse struct {
	// ID of account
	ID *string `gorm:"primaryKey" json:"id,omitempty"`
	// Name of user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Login of user
	Login *string `form:"login,omitempty" json:"login,omitempty" xml:"login,omitempty"`
	// Email of user
	Email *string `gorm:"index"`
	// Status of account
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// GroupResponse is used to define fields on response body types.
type GroupResponse struct {
	// Name of group
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// GUID of group
	GUID *string `form:"guid,omitempty" json:"guid,omitempty" xml:"guid,omitempty"`
}

// NewAccountsAccountOK builds a "aggregate" service "accounts" endpoint result
// from a HTTP "OK" response.
func NewAccountsAccountOK(body []*AccountResponse) []*aggregate.Account {
	v := make([]*aggregate.Account, len(body))
	for i, val := range body {
		v[i] = unmarshalAccountResponseToAggregateAccount(val)
	}

	return v
}

// NewAccountsPermissionDenied builds a aggregate service accounts endpoint
// PermissionDenied error.
func NewAccountsPermissionDenied(body *AccountsPermissionDeniedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGroupsGroupOK builds a "aggregate" service "groups" endpoint result from
// a HTTP "OK" response.
func NewGroupsGroupOK(body []*GroupResponse) []*aggregate.Group {
	v := make([]*aggregate.Group, len(body))
	for i, val := range body {
		v[i] = unmarshalGroupResponseToAggregateGroup(val)
	}

	return v
}

// NewGroupsPermissionDenied builds a aggregate service groups endpoint
// PermissionDenied error.
func NewGroupsPermissionDenied(body *GroupsPermissionDeniedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateAccountsPermissionDeniedResponseBody runs the validations defined on
// accounts_PermissionDenied_response_body
func ValidateAccountsPermissionDeniedResponseBody(body *AccountsPermissionDeniedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGroupsPermissionDeniedResponseBody runs the validations defined on
// groups_PermissionDenied_response_body
func ValidateGroupsPermissionDeniedResponseBody(body *GroupsPermissionDeniedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAccountResponse runs the validations defined on AccountResponse
func ValidateAccountResponse(body *AccountResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Login == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("login", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "active" || *body.Status == "disabled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"active", "disabled"}))
		}
	}
	return
}
