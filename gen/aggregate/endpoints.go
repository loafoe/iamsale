// Code generated by goa v3.13.2, DO NOT EDIT.
//
// aggregate endpoints
//
// Command:
// $ goa gen github.com/loafoe/sailpoint/design

package aggregate

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "aggregate" service endpoints.
type Endpoints struct {
	Accounts goa.Endpoint
	Groups   goa.Endpoint
}

// NewEndpoints wraps the methods of the "aggregate" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Accounts: NewAccountsEndpoint(s, a.BasicAuth),
		Groups:   NewGroupsEndpoint(s, a.BasicAuth),
	}
}

// Use applies the given middleware to all the "aggregate" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Accounts = m(e.Accounts)
	e.Groups = m(e.Groups)
}

// NewAccountsEndpoint returns an endpoint function that calls the method
// "accounts" of service "aggregate".
func NewAccountsEndpoint(s Service, authBasicFn security.AuthBasicFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AccountsPayload)
		var err error
		sc := security.BasicScheme{
			Name:           "BasicAuth",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authBasicFn(ctx, p.Username, p.Password, &sc)
		if err != nil {
			return nil, err
		}
		return s.Accounts(ctx, p)
	}
}

// NewGroupsEndpoint returns an endpoint function that calls the method
// "groups" of service "aggregate".
func NewGroupsEndpoint(s Service, authBasicFn security.AuthBasicFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GroupsPayload)
		var err error
		sc := security.BasicScheme{
			Name:           "BasicAuth",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authBasicFn(ctx, p.Username, p.Password, &sc)
		if err != nil {
			return nil, err
		}
		return s.Groups(ctx, p)
	}
}
